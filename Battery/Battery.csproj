<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
        <TargetFramework>netstandard2.1</TargetFramework>
        <AssemblyName>Battery</AssemblyName>
        <Description>Is your flashlight running out of battery quickly? Maybe it's time to use longer term batteries.</Description>
        <Version>1.0.3</Version>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <LangVersion>latest</LangVersion>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="BepInEx.Analyzers" Version="1.0.8" PrivateAssets="all" />
        <PackageReference Include="BepInEx.Core" Version="5.*" />
        <PackageReference Include="BepInEx.PluginInfoProps" Version="2.1.0" />
        <PackageReference Include="UnityEngine.Modules" Version="2022.3.9" IncludeAssets="compile" />
    </ItemGroup>

    <ItemGroup>
    <Reference Include="Assembly-CSharp">
      <HintPath>../manuelPackage/lib/Assembly-CSharp.dll</HintPath>
    </Reference>
    <Reference Include="Unity.Netcode.Runtime">
      <HintPath>../manuelPackage/lib/Unity.Netcode.Runtime.dll</HintPath>
    </Reference>
        <Reference Include="0Harmony">
      <HintPath>../manuelPackage/BepInEx/core/0Harmony.dll</HintPath>
        </Reference>
    <Reference Include="HarmonyXInterop">
      <HintPath>../manuelPackage/BepInEx/core/HarmonyXInterop.dll</HintPath>
    </Reference>
        <Reference Include="BepInEx">
      <HintPath>../manuelPackage/BepInEx/core/BepInEx.dll</HintPath>
    </Reference>
    <Reference Include="LethalLib">
      <HintPath>../manuelPackage/BepInEx/plugins/Evaisa-LethalLib/LethalLib/LethalLib.dll</HintPath>
    </Reference>
    <Reference Include="LethalThings">
      <HintPath>../manuelPackage/BepInEx/plugins/Evaisa-LethalThings/LethalThings/LethalThings.dll</HintPath>
    </Reference>
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework.TrimEnd(`0123456789`))' == 'net'">
        <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.2" PrivateAssets="all" />
    </ItemGroup>

    <Target Name="WindowsPostBuild" AfterTargets="PostBuildEvent" Condition="'$(OS)' == 'Windows_NT'">
    <Exec Command="PowerShell -Command New-Item -ItemType Directory -Path $(ProjectDir)\OLD -Force"/>
    <Exec Command="PowerShell -Command Move-Item &quot;$(ProjectDir)Thunderstore\plugins\$(TargetFileName)&quot; &quot;$(ProjectDir)\OLD\$(TargetFileName).OLD&quot; -Force" />
    <Exec Command="PowerShell -Command New-Item -ItemType Directory -Path $(ProjectDir)\Thunderstore\plugins -Force"/>
    <Exec Command="PowerShell -Command Copy-Item &quot;$(TargetDir)$(TargetFileName)&quot; &quot;$(ProjectDir)Thunderstore\plugins\$(TargetFileName)&quot; -Recurse -Force" />
    <Exec Command="PowerShell -Command  Set-Location $(ProjectDir)Thunderstore\ ; Compress-Archive -Path * -DestinationPath &quot;$(ProjectDir)Thunderstore/Thunderstore.zip&quot; -Force " />
  </Target>

  <Target Name="UnixPostBuild" AfterTargets="PostBuildEvent" Condition="'$(OS)' != 'Windows_NT'">
    <Exec Command="mkdir -p $(ProjectDir)\OLD"/>
   <Exec Command="if [ -f &quot;$(ProjectDir)Thunderstore/plugins/$(TargetFileName)&quot; ]; then mv -f &quot;$(ProjectDir)Thunderstore/plugins/$(TargetFileName)&quot; &quot;$(ProjectDir)/OLD/$(TargetFileName).OLD&quot;; fi" />
    <Exec Command="mkdir -p $(ProjectDir)/Thunderstore/plugins/"/>
    <Exec Command="cp &quot;$(TargetDir)$(TargetFileName)&quot; &quot;$(ProjectDir)/Thunderstore/plugins/$(TargetFileName)&quot;" />
    <Exec Command="cd $(ProjectDir)Thunderstore/; find '.' -type f -not -name '*.OLD' -exec zip $(ProjectDir)Thunderstore/Thunderstore.zip {} +" />
  </Target>
</Project>
